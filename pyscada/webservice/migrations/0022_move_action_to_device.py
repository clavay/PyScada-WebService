# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-02-24 12:49
from __future__ import unicode_literals
from .. import PROTOCOL_ID, __app_name__

from django.db import migrations
from django.db.utils import ProgrammingError

import logging

logger = logging.getLogger(__name__)


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    try:
        Device = apps.get_model("pyscada", "Device")
        WebServiceDevice = apps.get_model("webservice", "WebServiceDevice")
        DeviceProtocol = apps.get_model("pyscada", "DeviceProtocol")
        Variable = apps.get_model("pyscada", "Variable")
        WebServiceVariable = apps.get_model("webservice", "WebServiceVariable")
        WebServiceAction = apps.get_model("webservice", "WebServiceAction")
        db_alias = schema_editor.connection.alias

        protocol = DeviceProtocol.objects.using(db_alias).get(id=PROTOCOL_ID)

        # create devices
        for w_a in WebServiceAction.objects.using(db_alias).all():
            d = None
            for w_v in w_a.variables.all():
                if d is not None and w_v.device.webservicedevice != d:
                    logger.info(
                        f"WebServiceAction {w_a} has variable from differents devices. Not moving the action to the device {w_v.device} for variable {w_v}"
                    )
                elif d is not None and w_v.device.webservicedevice == d:
                    logger.info(
                        f"WebServiceAction {w_a} already moved to the device {w_v.device} for variable {w_v}"
                    )
                elif w_v.device.protocol == protocol:
                    d = w_v.device.webservicedevice
                    d.webservice_mode = w_a.webservice_mode
                    d.webservice_content_type = w_a.webservice_content_type
                    d.webservice_RW = w_a.webservice_RW
                    d.write_trigger = w_a.write_trigger
                    d.headers = w_a.headers
                    d.payload = w_a.payload
                    d.url += w_a.path
                    d.save()
                    logger.info(
                        f"WebServiceAction {w_a} moved to the device {w_v.device} for variable {w_v}"
                    )
                else:
                    logger.info(
                        f"Variable {w_v} used in action {w_a} is not from a webservice decide : {w_v.device}. Not moving the action to this device."
                    )
    except (ProgrammingError, LookupError):
        pass


def reverse_func(apps, schema_editor):
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("webservice", "0021_remove_webservicedevice_web_service_handler_and_more"),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
